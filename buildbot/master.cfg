# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

# XXX: stuff we fixed by hand in the buildbot source:
#      - http://trac.buildbot.net/ticket/3107

# import the stuff we're using
from buildbot.buildslave import BuildSlave
from buildbot.schedulers import basic, triggerable
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter
from buildbot.process.properties import Interpolate, renderer
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps import trigger
from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth

import os
from os import path
import string
import json
from pprint import pprint

# general configuration
c['protocols'] = {'pb': {'port': 9988}}
c['db'] = {'db_url': "sqlite:///state.sqlite"}
c['buildbotURL'] = "https://buildbot.meshwith.me/openwrt/"
c['title'] = "Meshbox"
c['titleURL'] = "https://github.com/seattlemeshnet/meshbox"
c['schedulers'] = []
c['builders'] = []
c['status'] = []

# gather profiles
builders = {}
files = [ f for f in os.listdir('builders') if path.isfile(path.join('builders', f)) ]
for f in files:
    name = string.split(f, '.')
    data = open(path.join('builders', f))
    builders[name[0]] = json.load(data)
    builders[name[0]]['slaves'] = []
    data.close()

# build configuration
secrets = {
    'repo': 'https://github.com/seattlemeshnet/meshbox.git',

    'httpPort': 8011,

    'publishTo': '/var/www/buildbot',

    # irc bot
    'ircServer': 'fcf2:ff45:a10:2ca1:fb5c:426d:3505:4f18',
    'ircPort': 6667,
    'ircNickname': 'buildbot',
    'ircChannel': '#openwrt'
}

# read and merge the passwords and slaves
secrets_data = open("secrets.json")
secrets.update(json.load(secrets_data))
secrets_data.close()
pprint(secrets)

# map builder -> slave -- when creating a builder, we need to assign
# it a list of slaves which will run its build
for slaveName in secrets['slaves'].keys():
    for builderName in secrets['slaves'][slaveName]['builders']:
        builderName = builderName.encode('us-ascii', 'replace')
        builders[builderName]['slaves'].append(slaveName)

pprint(builders)

# utility functions for conversion from unicode strings (emitted by json.load)
# to normal strings accepted by few buildbot classes.
def slaveFromSecret(name):
    return BuildSlave(name, secrets['slaves'][name]['password'], max_builds=1)
def userFromSecret(name):
    return (name.encode('us-ascii', 'replace'),
            secrets['users'][name].encode('us-ascii', 'replace'))

# the build slaves
c['slaves'] = map(slaveFromSecret, secrets['slaves'])
c['slaves'].append(BuildSlave('None', 'enoN', max_builds=1))

triggers = []
for builderName in builders.keys():
    builder = builders[builderName]
    branch = builder.get('branch')
    triggerNames = builder.get('trigger')
    if branch:
        c['schedulers'].append(basic.SingleBranchScheduler(
            name=builderName,
            change_filter=filter.ChangeFilter(branch=branch),
            treeStableTimer=60,
            builderNames=[builderName]))
    if triggerNames:
        for bName in triggerNames:
            triggers.append(bName)

for builderName in set(triggers):
    c['schedulers'].append(triggerable.Triggerable(
        name=builderName,
        builderNames=[builderName]))

c['schedulers'].append(
    ForceScheduler(name='force',
                   builderNames=builders.keys(),
                   branch=FixedParameter(name='branch', default=''),
                   repository=FixedParameter(name='repository', default=''),
                   project=FixedParameter(name='project', default=''),
                   reason=FixedParameter(name='reason', default=''),
                   properties=[]))

# clone the code
def gitStep(workdir):
    return Git(repourl=secrets['repo'],
               workdir=workdir,
               haltOnFailure=True,
               name='git')

def meshboxVersionStep(workdir):
    return SetPropertyFromCommand(command='cat meshbox/VERSION',
                                  property='meshboxVersion',
                                  haltOnFailure=True,
                                  name='meshbox_version')

def scriptStep(builder):
    return ShellCommand(name='script',
                        command=builder['script'],
                        workdir='build/meshbox/',
                        haltOnFailure=True)

def triggerStep(schedulerNames):
    return trigger.Trigger(schedulerNames=schedulerNames,
                           updateSourceStamp=True,
                           waitForFinish=False,
                           haltOnFailure=True)

# we download if the md5sum changes
def sdkStep(builder):
    return ShellCommand(command=Interpolate('''
        if [ ! %(kw:md5sum)s = "`cat sdk.md5sum`" ]; then
            rm -rf OpenWrt-SDK* sdk.md5sum &&
            wget --progress=dot %(kw:sdk)s &&
            echo %(kw:md5sum)s > sdk.md5sum
        fi
        rm -rf sdk/ &&
        tar -xf OpenWrt-SDK* &&
        mv -v $(ls -d OpenWrt-SDK-*/) sdk
        ''', sdk=builder['sdk'], md5sum=builder['sdk_md5sum']),
        haltOnFailure=True,
        name='sdk')

def opkgStep(builder):
    return ShellCommand(command=Interpolate('''
        repo=$(cd ../meshbox ; pwd) &&
        ln -vsf $repo/cjdns package/ &&
        ln -vsf $repo/luci-app-cjdns package/ &&
        make package/cjdns/compile V=s &&
        make package/luci-app-cjdns/compile V=s &&
        cd %(kw:dir)s/base &&
        ../../../../scripts/ipkg-make-index.sh . > Packages &&
        cat Packages | gzip > Packages.gz
    ''', dir=builder['opkg']),
    workdir='build/sdk/',
    haltOnFailure=True,
    name='opkg')

def opkgUploadStep(builder):
    return DirectoryUpload(slavesrc=builder['opkg'] + '/base',
                           masterdest=secrets['publishTo'] + builder['opkg_destination'],
                           url=builder['opkg_destination'],
                           workdir='build/sdk/',
                           haltOnFailure=True,
                           name='opkg_upload')

# we download if the md5sum changes
def imagebuilderStep(builder):
    return ShellCommand(command=Interpolate('''
        if [ ! %(kw:md5sum)s = "`cat imagebuilder.md5sum`" ]; then
            rm -rf OpenWrt-ImageBuilder* imagebuilder.md5sum &&
            wget --progress=dot %(kw:imagebuilder)s &&
            echo %(kw:md5sum)s > imagebuilder.md5sum
        fi
        rm -rf imagebuilder/ &&
        tar -xf OpenWrt-ImageBuilder* &&
        mv -v $(ls -d OpenWrt-ImageBuilder-*/) imagebuilder
        ''', imagebuilder=builder['imagebuilder'], md5sum=builder['imagebuilder_md5sum']),
        haltOnFailure=True,
        name='imagebuilder')

def imagesStep(builder):
    return ShellCommand(command=Interpolate('''
        repo=$(cd ../meshbox ; pwd) &&
        mkdir -p files/etc &&
        (cp $repo/VERSION files/etc/meshbox_version || true) &&
        echo src imagebuilder file:packages > repositories.conf &&
        echo %(kw:opkg_repo)s >> repositories.conf &&
        make image PROFILE=%(kw:profile)s FILES=files/ PACKAGES="luci luci-app-cjdns cjdns kmod-ipt-nat6 kmod-nf-nat6 -kmod-ppp -ppp  luci-app-firewall"
    ''', opkg_repo=builder['opkg_repo'], profile=builder['profile']), workdir='build/imagebuilder/',
    haltOnFailure=True,
    name='images')

def imagesUploadStep(builder, image):
    return DirectoryUpload(slavesrc=image['src'],
                           masterdest=Interpolate(secrets['publishTo'] + image['dest']),
                           url=Interpolate(image['dest']),
                           workdir='build/imagebuilder/',
                           haltOnFailure=True,
                           name='images_upload')

def builderBuilder(builderName, slaveNames):
    factory = BuildFactory()
    builder = builders[builderName]

    factory.addStep(gitStep('build/meshbox/'))
    factory.addStep(meshboxVersionStep(builder))

    if builder.get('opkg'):
        factory.addStep(sdkStep(builder))
        factory.addStep(opkgStep(builder))
    if builder.get('profile'):
        factory.addStep(imagebuilderStep(builder))
        factory.addStep(imagesStep(builder))

    if builder.get('script'):
        factory.addStep(scriptStep(builder))

    if builder.get('opkg_destination'):
        # TODO: download existing repo so we can keep old packages
        #       around in Packages.gz
        factory.addStep(opkgUploadStep(builder))
    if builder.get('images'):
        # TODO: skip if target dir is non-empty
        for image in builder['images']:
            factory.addStep(imagesUploadStep(builder, image))

    if builder.get('trigger'):
        factory.addStep(triggerStep(builder['trigger']))

    return BuilderConfig(name=builderName, slavenames=slaveNames, factory=factory)

for builderName in builders.keys():
    slaveNames = builders[builderName]['slaves']
    if len(slaveNames) == 0:
        slaveNames.append('None')
    c['builders'].append(builderBuilder(builderName, slaveNames))

# the web UI
users = map(userFromSecret, secrets['users'])
c['status'].append(html.WebStatus(
    http_port=secrets['httpPort'],
    authz=authz.Authz(
        auth=auth.BasicAuth(users),
        cleanShutdown='auth',
        gracefulShutdown='auth',
        forceBuild='auth',
        forceAllBuilds='auth',
        pingBuilder='auth',
        stopBuild='auth',
        stopAllBuilds='auth',
        cancelPendingBuild='auth',
        cancelAllPendingBuilds='auth'),
    change_hook_dialects={ 'github' : True },
    # TODO: should use secrets.json
    change_hook_auth=['file:changehook.passwd']
))

# the IRC bot
c['status'].append(words.IRC(secrets['ircServer'], secrets['ircNickname'],
    channels=[{"channel": secrets['ircChannel']}],
    port=secrets['ircPort'],
    notify_events={
      'exception': 1,
      'failure': 1,
      'failureToSuccess': 1,
      'success': 1,
      'successToFailure': 1,
    }))

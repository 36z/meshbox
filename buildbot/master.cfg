# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import json
secrets_data = open("secrets.json")
secrets = json.load(secrets_data)
secrets_data.close()

secrets['branches'] = [
    ['master', 'git://git.openwrt.org/openwrt.git'],
    ['for-14.07', 'git://git.openwrt.org/14.07/openwrt.git']
]

from pprint import pprint

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

def buildslave(secret):
    return BuildSlave(secret[0], secret[1])

c['slaves'] = map(buildslave, secrets["slaves"])

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989
if "ports" in secrets:
    if "slave" in secrets['ports']:
        c['slavePortnum'] = secrets['ports']['slave']

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []
for branch in secrets['branches']:
    c['schedulers'].append(SingleBranchScheduler(
        name="smoketest-%s" % branch[0],
        change_filter=filter.ChangeFilter(branch=branch[0]),
        treeStableTimer=None,
        builderNames=["smoketest-%s" % branch[0]]))
    c['schedulers'].append(ForceScheduler(
        name="force-smoketest-%s" % branch[0],
        builderNames=["smoketest-%s" % branch[0]]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.transfer import DirectoryUpload

import os.path

c['builders'] = []

def setupStep(branch):
    return ShellCommand(command="""
        rm -rf bin/ tmp/ build_dir/target-* dl/;
        cp feeds.conf.default feeds.conf;
        echo "src-git meshbox git://github.com/seattlemeshnet/meshbox.git;%s" >> feeds.conf;
        scripts/feeds update -a;
        scripts/feeds install -a
    """ % branch, name="setup")

def configureStep(target):
    return Configure(command="""
        cp feeds/meshbox/buildbot/%s.config .config;
        echo CONFIG_DEVEL=y >> .config;
        echo CONFIG_TOOLCHAINOPTS=y >> .config;
        echo CONFIG_SSP_SUPPORT=y >> .config;
        echo CONFIG_PACKAGE_libssp=y >> .config;
        echo CONFIG_PACKAGE_luci-app-cjdns=y >> .config;
        echo CONFIG_PACKAGE_luci=y >> .config;
        make defconfig
    """ % target, name="configure")

def compileStep():
    return Compile(command="make -j 2 V=s", timeout=7200)

def smoketestStep():
    return ShellCommand(command="feeds/meshbox/docker/smoketest.sh", name="test")

def smoketestConfig(branch, repo, builders):
    factory = BuildFactory()

    factory.addStep(Git(repourl=repo, mode='incremental'))

    factory.addStep(setupStep(branch))
    factory.addStep(configureStep('x86'))
    factory.addStep(compileStep())
    factory.addStep(smoketestStep())

    slaves = []
    for builder in builders:
        if builder[0] == 'x86':
            slaves.extend(builder[1])

    return BuilderConfig(name='smoketest-%s' % branch,
                         slavenames=slaves,
                         factory=factory,
                         properties={
                             "github_repo_owner": "SeattleMeshnet",
                             "github_repo_name": "meshbox",
                             })

for branch in secrets['branches']:
    c['builders'].append(smoketestConfig(branch[0], branch[1], secrets['builders']))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

def authz_tuple(secret):
    return (
        secret[0].encode('ascii', 'replace'),
        secret[1].encode('ascii', 'replace')
    )

authz_cfg=authz.Authz(
    auth=auth.BasicAuth(map(authz_tuple, secrets["authz"])),
    gracefulShutdown   = False,
    forceBuild         = 'auth',
    forceAllBuilds     = 'auth',
    pingBuilder        = 'auth',
    stopBuild          = 'auth',
    stopAllBuilds      = 'auth',
    cancelPendingBuild = 'auth',
)

http_port = 8010
if 'ports' in secrets:
    if 'http' in secrets['ports']:
        http_port = secrets['ports']['http']

c['status'].append(html.WebStatus(
    http_port = http_port,
    authz = authz_cfg
))

from buildbot.status import words
hypeirc = words.IRC("fcf2:ff45:a10:2ca1:fb5c:426d:3505:4f18", "buildbot",
                channels=[{"channel": "#openwrt"}],
                port=6667,
                notify_events={
                  'exception': 1,
                  'failure': 1,
                  'failureToSuccess': 1,
                  'success': 1,
                  'successToFailure': 1,
                })

c['status'].append(hypeirc)

from buildbot.status.github import GitHubStatus
from buildbot.process.properties import Interpolate

if 'github' in secrets:
    if 'API' in secrets['github']:
        if 'token' in secrets['github']['API']:
            repoOwner = Interpolate("%(prop:github_repo_owner)s")
            repoName = Interpolate("%(prop:github_repo_name)s")
            sha = Interpolate("%(src::revision)s")
            gs = GitHubStatus(token=secrets['github']['API']['token'],
                              repoOwner=repoOwner,
                              repoName=repoName,
                              sha=sha,
                              startDescription='Build in progress.',
                              endDescription='Build done.')
            c['status'].append(gs)

c['title']       = "Meshbox"
c['titleURL']    = "https://github.com/seattlemeshnet/meshbox"
c['buildbotURL'] = "https://buildbot.meshwith.me/openwrt/"
c['db_url']      = "sqlite:///state.sqlite"

if 'url' in secrets:
    c['buildbotURL'] = secrets['url']
